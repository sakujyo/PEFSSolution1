// Learn more about F# at http://fsharp.net

namespace PEFSTest

open System
open NUnit.Framework
open PEFS.Problem_0000
open PEFS.Problem_0003
open PEFS.Problem_0011
//open PEFS.Problem_0013

module PEFSTestModule =

    [<TestFixture>]
    type MyTest() =

        member x.measureCPUTime (func : obj * Constraints.IResolveConstraint * string -> unit) (lazyarg : Lazy<'a>) arg2 arg3 =
            let cp = System.Diagnostics.Process.GetCurrentProcess()
            let t1 = cp.TotalProcessorTime
//            printfn "CPU Time 1: %A" (t1)
            func (lazyarg.Force(), arg2, arg3)
            let t2 = cp.TotalProcessorTime
//            printfn "CPU Time 2: %A" (t2)
            printfn "%s" arg3
            printfn "Test CPU Time: %A" (t2 - t1)

        static member TestData0000 =
            [|
//                [| 1, 1234 |];
                [| 2, 2468 |];
            |]
        [<Test;Description("Problem 0 Test")>]
        [<TestCaseSource("TestData0000")>]
        member x.Problem_0000 (data : int * int) =
            let input, result = data in
            x.measureCPUTime Assert.That (lazy(PEFS.Problem_0000.run input)) (Is.EqualTo(result)) (sprintf "1234 * %A = %A" input result)
//            Assert.That (PEFS.Problem_0000.run input, Is.EqualTo(result), sprintf "1234 * %A = %A" input result)

        static member TestData0003 =
            [|
                [| 5M, [5M] |];
                [| 81M, [3M; 3M; 3M; 3M] |];
                [| 13195M, [5M; 7M; 13M; 29M] |];
                [| 30971726M, [2M; 15485863M] |];
                [| 435290354M, [2M; 217645177M] |];
                [| 452902805417M, [672193m; 673769M] |];
                [| 600851475143M, [71M; 839M; 1471M; 6857M] |];
                [| 47018449M, [6857M; 6857M] |];
                [| 37366090917157M, [6111983M; 6113579M] |];
            |]
        [<Test;Description("Problem 3 Test")>]
        [<TestCaseSource("TestData0003")>]
        member x.Problem_0003 (data : decimal * List<decimal>) =
            let input, result = data in
            x.measureCPUTime Assert.That (lazy(PEFS.Problem_0003.test input)) (Is.EqualTo(result)) (sprintf "prime factors of %A = %A" input result)

        static member TestData0011 =
            [|
                [| ( [
                        12;34;00;
                        00;00;00;
                        00;00;00;
                    ], 3, 3, 2 ), 408 |];
                [| ( [
                        08;02;22;97;38;15;00;40;00;75;04;05;07;78;52;12;50;77;91;08;
                        49;49;99;40;17;81;18;57;60;87;17;40;98;43;69;48;04;56;62;00;
                        81;49;31;73;55;79;14;29;93;71;40;67;53;88;30;03;49;13;36;65;
                        52;70;95;23;04;60;11;42;69;24;68;56;01;32;56;71;37;02;36;91;
                        22;31;16;71;51;67;63;89;41;92;36;54;22;40;40;28;66;33;13;80;
                        24;47;32;60;99;03;45;02;44;75;33;53;78;36;84;20;35;17;12;50;
                        32;98;81;28;64;23;67;10;26;38;40;67;59;54;70;66;18;38;64;70;
                        67;26;20;68;02;62;12;20;95;63;94;39;63;08;40;91;66;49;94;21;
                        24;55;58;05;66;73;99;26;97;17;78;78;96;83;14;88;34;89;63;72;
                        21;36;23;09;75;00;76;44;20;45;35;14;00;61;33;97;34;31;33;95;
                        78;17;53;28;22;75;31;67;15;94;03;80;04;62;16;14;09;53;56;92;
                        16;39;05;42;96;35;31;47;55;58;88;24;00;17;54;24;36;29;85;57;
                        86;56;00;48;35;71;89;07;05;44;44;37;44;60;21;58;51;54;17;58;
                        19;80;81;68;05;94;47;69;28;73;92;13;86;52;17;77;04;89;55;40;
                        04;52;08;83;97;35;99;16;07;97;57;32;16;26;26;79;33;27;98;66;
                        88;36;68;87;57;62;20;72;03;46;33;67;46;55;12;32;63;93;53;69;
                        04;42;16;73;38;25;39;11;24;94;72;18;08;46;29;32;40;62;76;36;
                        20;69;36;41;72;30;23;88;34;62;99;69;82;67;59;85;74;04;36;16;
                        20;73;35;29;78;31;90;01;74;31;49;71;48;86;81;16;23;57;05;54;
                        01;70;54;71;83;51;54;69;16;92;33;48;61;43;52;01;89;19;67;48;
                    ], 20, 20, 4 ), 70600674 |];
            |]
        [<Test;Description("Problem 11 Test")>]
        [<TestCaseSource("TestData0011")>]
        member x.Problem_0011 (data : (int list * int * int * int) * int) =
            let input, result = data in
            x.measureCPUTime Assert.That (lazy(PEFS.Problem_0011.solve input)) (Is.EqualTo(result)) (sprintf "max product of %A = %A" input result)

        static member TestData0012 =
            [|
                [| 1, 1 |];
                [| 2, 3 |];
                [| 4, 6 |];
                [| 6, 28 |];
                [| 9, 36 |];
                [| 16, 120 |];
                [| 501, 76576500 |];
            |]
        [<Test;Description("Problem 12 Test")>]
        [<TestCaseSource("TestData0012")>]
        member x.Problem_0012 (data : int * int) =
            let input, result = data in
            x.measureCPUTime Assert.That (lazy(PEFS.Problem_0012.solve input)) (Is.EqualTo(result)) (sprintf "the value of the first triangle number to have over %d = %d - 1 divisors = %d" (input - 1) input result)

        static member TestData0013 =
            [|
                [|  
                    [
                        37107287533902102798797998220837590246510135740250I;
                        46376937677490009712648124896970078050417018260538I;
                        74324986199524741059474233309513058123726617309629I;
                        91942213363574161572522430563301811072406154908250I;
                        23067588207539346171171980310421047513778063246676I;
                        89261670696623633820136378418383684178734361726757I;
                        28112879812849979408065481931592621691275889832738I;
                        44274228917432520321923589422876796487670272189318I;
                        47451445736001306439091167216856844588711603153276I;
                        70386486105843025439939619828917593665686757934951I;
                        62176457141856560629502157223196586755079324193331I;
                        64906352462741904929101432445813822663347944758178I;
                        92575867718337217661963751590579239728245598838407I;
                        58203565325359399008402633568948830189458628227828I;
                        80181199384826282014278194139940567587151170094390I;
                        35398664372827112653829987240784473053190104293586I;
                        86515506006295864861532075273371959191420517255829I;
                        71693888707715466499115593487603532921714970056938I;
                        54370070576826684624621495650076471787294438377604I;
                        53282654108756828443191190634694037855217779295145I;
                        36123272525000296071075082563815656710885258350721I;
                        45876576172410976447339110607218265236877223636045I;
                        17423706905851860660448207621209813287860733969412I;
                        81142660418086830619328460811191061556940512689692I;
                        51934325451728388641918047049293215058642563049483I;
                        62467221648435076201727918039944693004732956340691I;
                        15732444386908125794514089057706229429197107928209I;
                        55037687525678773091862540744969844508330393682126I;
                        18336384825330154686196124348767681297534375946515I;
                        80386287592878490201521685554828717201219257766954I;
                        78182833757993103614740356856449095527097864797581I;
                        16726320100436897842553539920931837441497806860984I;
                        48403098129077791799088218795327364475675590848030I;
                        87086987551392711854517078544161852424320693150332I;
                        59959406895756536782107074926966537676326235447210I;
                        69793950679652694742597709739166693763042633987085I;
                        41052684708299085211399427365734116182760315001271I;
                        65378607361501080857009149939512557028198746004375I;
                        35829035317434717326932123578154982629742552737307I;
                        94953759765105305946966067683156574377167401875275I;
                        88902802571733229619176668713819931811048770190271I;
                        25267680276078003013678680992525463401061632866526I;
                        36270218540497705585629946580636237993140746255962I;
                        24074486908231174977792365466257246923322810917141I;
                        91430288197103288597806669760892938638285025333403I;
                        34413065578016127815921815005561868836468420090470I;
                        23053081172816430487623791969842487255036638784583I;
                        11487696932154902810424020138335124462181441773470I;
                        63783299490636259666498587618221225225512486764533I;
                        67720186971698544312419572409913959008952310058822I;
                        95548255300263520781532296796249481641953868218774I;
                        76085327132285723110424803456124867697064507995236I;
                        37774242535411291684276865538926205024910326572967I;
                        23701913275725675285653248258265463092207058596522I;
                        29798860272258331913126375147341994889534765745501I;
                        18495701454879288984856827726077713721403798879715I;
                        38298203783031473527721580348144513491373226651381I;
                        34829543829199918180278916522431027392251122869539I;
                        40957953066405232632538044100059654939159879593635I;
                        29746152185502371307642255121183693803580388584903I;
                        41698116222072977186158236678424689157993532961922I;
                        62467957194401269043877107275048102390895523597457I;
                        23189706772547915061505504953922979530901129967519I;
                        86188088225875314529584099251203829009407770775672I;
                        11306739708304724483816533873502340845647058077308I;
                        82959174767140363198008187129011875491310547126581I;
                        97623331044818386269515456334926366572897563400500I;
                        42846280183517070527831839425882145521227251250327I;
                        55121603546981200581762165212827652751691296897789I;
                        32238195734329339946437501907836945765883352399886I;
                        75506164965184775180738168837861091527357929701337I;
                        62177842752192623401942399639168044983993173312731I;
                        32924185707147349566916674687634660915035914677504I;
                        99518671430235219628894890102423325116913619626622I;
                        73267460800591547471830798392868535206946944540724I;
                        76841822524674417161514036427982273348055556214818I;
                        97142617910342598647204516893989422179826088076852I;
                        87783646182799346313767754307809363333018982642090I;
                        10848802521674670883215120185883543223812876952786I;
                        71329612474782464538636993009049310363619763878039I;
                        62184073572399794223406235393808339651327408011116I;
                        66627891981488087797941876876144230030984490851411I;
                        60661826293682836764744779239180335110989069790714I;
                        85786944089552990653640447425576083659976645795096I;
                        66024396409905389607120198219976047599490197230297I;
                        64913982680032973156037120041377903785566085089252I;
                        16730939319872750275468906903707539413042652315011I;
                        94809377245048795150954100921645863754710598436791I;
                        78639167021187492431995700641917969777599028300699I;
                        15368713711936614952811305876380278410754449733078I;
                        40789923115535562561142322423255033685442488917353I;
                        44889911501440648020369068063960672322193204149535I;
                        41503128880339536053299340368006977710650566631954I;
                        81234880673210146739058568557934581403627822703280I;
                        82616570773948327592232845941706525094512325230608I;
                        22918802058777319719839450180888072429661980811197I;
                        77158542502016545090413245809786882778948721859617I;
                        72107838435069186155435662884062257473692284509516I;
                        20849603980134001723930671666823555245252804609722I;
                        53503534226472524250874054075591789781264330331690I;

                    ] , 5537376230I
                |];
//                [| ["999999999999999"; "999999999999999"], 1999999999M |];
                // 100個の数の和の前提
            |]
//        [<Test;Description("Problem 13 Test")>]
//        [<TestCaseSource("TestData0013")>]
//        member x.TestSummation (data : (List<bigint>) * bigint) =
//            let cp = System.Diagnostics.Process.GetCurrentProcess()
//            let t1 = cp.TotalProcessorTime
//            let input, result = data in
//            x.measureCPUTime Assert.That (lazy(PEFS.Problem_0013.run input)) (Is.EqualTo(result)) (sprintf "SUMMATION = %A" result)
//            Assert.That (NSPEULAR.Problem_0013.run input, Is.EqualTo(result), sprintf "SUMMATION = %A" result)
//            let t2 = cp.TotalProcessorTime
//            printfn "Test CPU Time: %A" (t2 - t1)
